h1. acts_as_gold

Acts_as_gold extends ActiveRecord models to use a single integer column to store money in the form of Gold, Silver and Copper. This money system can be found in many games, including World of Warcraft.

Written by "Ariejan de Vroom":mailto:ariejan@ariejan.net

Copyright 2008 Ariejan de Vroom

h2. Download and installation

You can install acts_as_gold either as a Ruby on Rails plugin or a Ruby Gem. It's recommended you use the Ruby Gem to get easier updates later on. 

h3. Plugin installation

Simply install the plugin:

<pre>./script/plugin install git://github.com/ariejan/acts_as_gold.git</pre>

h3. Gem installation

Just install the gem:

<pre>gem install ariejan-acts_as_gold --source http://gems.github.com</pre>

Add the following to your environment.rb if you want to use Rails 2.1's dependency manager (which is highly recommended):

<pre><code>config.gem "ariejan-acts_as_gold",
           :lib    => "acts_as_gold",
           :source => "http://gems.github.com"</code></pre>

h2. Enabling acts_as_gold

This will use player.money to store the current amount of money.

<pre><code>class Player < ActiveRecord::Base
  acts_as_gold	# Uses the +money+ attribute from Player
end</code></pre>

You may also specify a different column for storing money, for example +pennies+

<pre><code>class Player < ActiveRecord::Base
  acts_as_gold :column => :pennies # Uses the +pennies+ attribute from Player
end</code></pre>

h2. Using acts_as_gold

Acts_as_gold adds two things. If you make a model act as gold, you'll get three bonus methods: +gold+, +silver+ and +copper+. 

You can have a maximum of 99 copper and 99 silver. 99 copper becomes 1 silver and 99 silver becomes 1 gold. The amount of gold is limited by the integer type you use.

214,748 Gold, 36 Silver, 47 Copper for a default :integer column (int(11))
922,337,203,685,477 Gold, 58 Silver, 07 Copper for a bigint (int(20)). 

<pre><code>player.money = 3005075
player.gold => 300
player.silver => 50
player.copper => 75</code></pre>

A sample migration to add the money column to your model:

<pre><code>add_column :players, :money, :integer, :limit => 20, :default => 15000</code></pre>

This migration allows up to approximately 922,377 billion gold and gives the player 1 gold and 50 silver by default. 

h2. Earning and spending

It's really easy to earn and spend money.

Earning money is no problem. You may want want to set a limit to the maximum amount of money you can have to avoid interger overflows. 

<pre><code>player.earn(2.gold + 25.silver)</code></pre>

Spending is also easy. This method return true if the money was spend successfully. It will raise a NotEnoughMoneyError if there's not enough money to be spend. 

<pre><code>player.spend(10.silver + 3.copper)</code></pre>

h2. Fixnum and Bignum extensions

As een in the previous examples, you can use several helper methods on Fixnum and Bignum to convert them to correct money values. You can use these throughout your application:

<pre><code>25.gold
33.silver
78.copper</code></pre>

h2. More Information

"Ariejan.net":http://ariejan.net